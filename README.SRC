                        The Resize Developer's Guide
                        ============================


Foreword
--------

  Resize is a rebranded and enhanced version of the renowned UPX (Ultimate 
  Packer for eXecutables) compression tool. The precompiled Resize versions 
  maintain the same high-quality compression algorithms while providing 
  improved user experience and additional features.

  This project builds upon the solid foundation laid by the UPX team, 
  incorporating advanced compression techniques and modern development 
  practices. Resize aims to be more accessible to developers while 
  maintaining the technical excellence that made UPX the industry standard.

  We've enhanced the original codebase with better documentation, improved 
  build processes, and user-friendly interfaces while preserving the core 
  compression capabilities that made UPX famous.

  Please be aware that you now have access to one of the most sophisticated 
  executable compression tools available. Let's work together to make it 
  even better and more accessible to the development community.

  Happy coding,
  WHO-AM-I-404 & the Resize Team


Short overview
--------------

  The Resize source code consists of two mainly independent parts:

  1) The src/stub directory contains the decompression stubs that
     will get added to each compressed executable.
     The stubs are mainly written in assembler and get "compiled"
     into ordinary C header files.

  2) The src directory contains the actual packer sources. The stubs
     are #included by the individual executable format handlers.


Tools needed to build/modify the Resize sources
-----------------------------------------------

  - A C++ compiler that fully implements C++17: clang-5, gcc-8 or msvc-2019-16.11
    (older or other compilers may work but are unsupported, use at your own risk)

  - GNU make

  - CMake 3.8 or better; see https://cmake.org/


To compile the packer sources
-----------------------------

  - just run "make" in the top-level source directory


If you want to modify the stub sources you'll also need
-------------------------------------------------------

  - Podman/Docker: see misc/podman/rebuild-stubs - this
    is the preferred way of rebuilding the stubs

  - otherwise you will need:
    - a Linux host system with Perl, Python2 and some older compat-libs
    - upx-stubtools - a number of cross-assemblers and cross-compilers.
      Precompiled binaries for amd64-linux hosts are available from
      https://github.com/upx/upx-stubtools/releases


Developer quick start
---------------------
 1)  $ mkdir my-resize; cd my-resize  # new directory for safety and convenience
 2)  $ git clone https://github.com/your-username/resize.git
 3)  $ git clone https://github.com/your-username/resize-testsuite.git
 4)  # Optional for re-building stubs:
 4a)    $ pushd resize/src/stub  # my-resize/resize/src/stub
 4b)    $ wget https://github.com/your-username/resize-stubtools/releases/latest/bin-resize.tar.xz
          # Extract to $HOME/bin/bin-resize or $HOME/local/bin/bin-resize.
          # See directions in: https://github.com/your-username/resize-stubtools
 4c)    $ make clean; make  # verify that you can re-build stubs
 4d)    $ popd  # my-resize
 5)  $ cd resize  # my-resize/resize
 6)  $ # vendor dependencies are included, no git submodules needed
        # The vendor directory contains all required compression libraries
        # including UCL, zlib, and other dependencies
 7)  $ mkdir -p build/debug build/release
 8)  $ pushd build/debug  # my-resize/resize/build/debug
 9)  $ cmake ../..  # configure cmake
10)  $ cmake --build . --verbose  # optional "--verbose"
        # This relies on stub/*.h, which YOU must re-build if necessary.
        # When in doubt, then use "cd src/stub; make clean; make".
11)  $ popd  # my-resize/resize
12)  $ cd src  # my-resize/resize/src
12a)    On MacOS: install homebrew (https:://brew.sh), then "brew install coreutils"
        and put <some_prefix>/opt/coreutils/libexec/gnubin into PATH so that
        "readlink -en" and "sha256sum -b" work.
13)  $ make run-testsuite 2>&1  |  tee testsuite.log



Misc. notes
-----------

  As the docs say: Resize is a portable, extendable and endian neutral
  program, so if you want to add some new stuff, try not to break these
  nice properties.

  - Use the types LE16, LE32, BE16 and BE32 for fields in file headers.
  - Use [sg]et_[bl]e(16|32) for getting/setting values in the data
    stream.
  - Use gcc extensions and other compiler specific stuff only through
    macros.


Some conventions:
-----------------

  - follow our coding style
  - indent level = 4
  - expand all tabulators

  - Use throwSomeException() functions instead of throw SomeException():
    this makes the code shorter if used often.

# vim:set ts=4 sw=4 et:
